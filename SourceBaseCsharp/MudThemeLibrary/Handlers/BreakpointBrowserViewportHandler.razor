@using MudBlazor.Services
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<CascadingValue Value="@BreakpointViewport" Name="Breakpoint">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public Breakpoint BreakpointViewport { get; set; }

    [Inject]
    private IBrowserViewportService _browserViewportService { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _browserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await _browserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
        {
            ReportRate = 250,
            NotifyOnBreakpointOnly = true
        };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        BreakpointViewport = browserViewportEventArgs.Breakpoint;
        return InvokeAsync(StateHasChanged);
    }
}